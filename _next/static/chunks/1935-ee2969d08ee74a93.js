"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1935],{41935:function(e,t,r){function defineProperties(e,t,r){for(let i in t){let n=t[i],s=r?r[i]:null;s&&function(e,t,r){let i=t.split("|").map(e=>e.trim());for(let r=0;r<i.length;r++)switch(t){case"any":return;case"bigint":case"boolean":case"number":case"string":if(typeof e===t)return}let n=Error(`invalid value for type ${t}`);throw n.code="INVALID_ARGUMENT",n.argument=`value.${r}`,n.value=e,n}(n,s,i),Object.defineProperty(e,i,{enumerable:!0,value:n,writable:!1})}}function stringify(e){if(null==e)return"null";if(Array.isArray(e))return"[ "+e.map(stringify).join(", ")+" ]";if(e instanceof Uint8Array){let t="0123456789abcdef",r="0x";for(let i=0;i<e.length;i++)r+=t[e[i]>>4]+t[15&e[i]];return r}if("object"==typeof e&&"function"==typeof e.toJSON)return stringify(e.toJSON());switch(typeof e){case"boolean":case"symbol":case"number":return e.toString();case"bigint":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{let t=Object.keys(e);return t.sort(),"{ "+t.map(t=>`${stringify(t)}: ${stringify(e[t])}`).join(", ")+" }"}}return"[ COULD NOT SERIALIZE ]"}function errors_assert(e,t,r,i){if(!e)throw function(e,t,r){let i,n=e;{let i=[];if(r){if("message"in r||"code"in r||"name"in r)throw Error(`value will overwrite populated values: ${stringify(r)}`);for(let e in r){if("shortMessage"===e)continue;let t=r[e];i.push(e+"="+stringify(t))}}i.push(`code=${t}`),i.push("version=6.8.0"),i.length&&(e+=" ("+i.join(", ")+")")}switch(t){case"INVALID_ARGUMENT":i=TypeError(e);break;case"NUMERIC_FAULT":case"BUFFER_OVERRUN":i=RangeError(e);break;default:i=Error(e)}return defineProperties(i,{code:t}),r&&Object.assign(i,r),null==i.shortMessage&&defineProperties(i,{shortMessage:n}),i}(t,r,i)}function assertArgument(e,t,r,i){errors_assert(e,t,"INVALID_ARGUMENT",{argument:r,value:i})}r.d(t,{dF:function(){return formatEther},fi:function(){return parseEther},vz:function(){return parseUnits}}),["NFD","NFC","NFKD","NFKC"].reduce((e,t)=>{try{if("test"!=="test".normalize(t))throw Error("bad");if("NFD"===t){let e=String.fromCharCode(233).normalize("NFD"),t=String.fromCharCode(101,769);if(e!==t)throw Error("broken")}e.push(t)}catch(e){}return e},[]);let i=BigInt(0),n=BigInt(1);function fromTwos(e,t){let r=getUint(e,"value"),s=BigInt(getNumber(t,"width"));if(errors_assert(r>>s===i,"overflow","NUMERIC_FAULT",{operation:"fromTwos",fault:"overflow",value:e}),r>>s-n){let e=(n<<s)-n;return-((~r&e)+n)}return r}function mask(e,t){let r=getUint(e,"value"),i=BigInt(getNumber(t,"bits"));return r&(n<<i)-n}function getBigInt(e,t){switch(typeof e){case"bigint":return e;case"number":return assertArgument(Number.isInteger(e),"underflow",t||"value",e),assertArgument(e>=-9007199254740991&&e<=9007199254740991,"overflow",t||"value",e),BigInt(e);case"string":try{if(""===e)throw Error("empty string");if("-"===e[0]&&"-"!==e[1])return-BigInt(e.substring(1));return BigInt(e)}catch(r){assertArgument(!1,`invalid BigNumberish string: ${r.message}`,t||"value",e)}}assertArgument(!1,"invalid BigNumberish value",t||"value",e)}function getUint(e,t){let r=getBigInt(e,t);return errors_assert(r>=i,"unsigned value cannot be negative","NUMERIC_FAULT",{fault:"overflow",operation:"getUint",value:e}),r}let s="0123456789abcdef";function getNumber(e,t){switch(typeof e){case"bigint":return assertArgument(e>=-9007199254740991&&e<=9007199254740991,"overflow",t||"value",e),Number(e);case"number":return assertArgument(Number.isInteger(e),"underflow",t||"value",e),assertArgument(e>=-9007199254740991&&e<=9007199254740991,"overflow",t||"value",e),e;case"string":try{if(""===e)throw Error("empty string");return getNumber(BigInt(e),t)}catch(r){assertArgument(!1,`invalid numeric string: ${r.message}`,t||"value",e)}}assertArgument(!1,"invalid numeric value",t||"value",e)}let a=BigInt(-1),u=BigInt(0),l=BigInt(1),o=BigInt(5),f={},g="0000";for(;g.length<80;)g+=g;function getTens(e){let t=g;for(;t.length<e;)t+=t;return BigInt("1"+t.substring(0,e))}function checkValue(e,t,r){let i=BigInt(t.width);if(t.signed){let t=l<<i-l;errors_assert(null==r||e>=-t&&e<t,"overflow","NUMERIC_FAULT",{operation:r,fault:"overflow",value:e}),e=e>u?fromTwos(mask(e,i),i):-fromTwos(mask(-e,i),i)}else{let t=l<<i;errors_assert(null==r||e>=0&&e<t,"overflow","NUMERIC_FAULT",{operation:r,fault:"overflow",value:e}),e=(e%t+t)%t&t-l}return e}function getFormat(e){"number"==typeof e&&(e=`fixed128x${e}`);let t=!0,r=128,i=18;if("string"==typeof e){if("fixed"===e);else if("ufixed"===e)t=!1;else{let n=e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);assertArgument(n,"invalid fixed format","format",e),t="u"!==n[1],r=parseInt(n[2]),i=parseInt(n[3])}}else if(e){let n=e,check=(e,t,r)=>null==n[e]?r:(assertArgument(typeof n[e]===t,"invalid fixed format ("+e+" not "+t+")","format."+e,n[e]),n[e]);t=check("signed","boolean",t),r=check("width","number",r),i=check("decimals","number",i)}assertArgument(r%8==0,"invalid FixedNumber width (not byte aligned)","format.width",r),assertArgument(i<=80,"invalid FixedNumber decimals (too large)","format.decimals",i);let n=(t?"":"u")+"fixed"+String(r)+"x"+String(i);return{signed:t,width:r,decimals:i,name:n}}let FixedNumber=class FixedNumber{format;#e;#t;#r;_value;constructor(e,t,r){!function(e,t,r){if(null==r&&(r=""),e!==t){let e=r,t="new";r&&(e+=".",t+=" "+r),errors_assert(!1,`private constructor; use ${e}from* methods`,"UNSUPPORTED_OPERATION",{operation:t})}}(e,f,"FixedNumber"),this.#t=t,this.#e=r;let i=function(e,t){let r="";e<u&&(r="-",e*=a);let i=e.toString();if(0===t)return r+i;for(;i.length<=t;)i=g+i;let n=i.length-t;for(i=i.substring(0,n)+"."+i.substring(n);"0"===i[0]&&"."!==i[1];)i=i.substring(1);for(;"0"===i[i.length-1]&&"."!==i[i.length-2];)i=i.substring(0,i.length-1);return r+i}(t,r.decimals);defineProperties(this,{format:r.name,_value:i}),this.#r=getTens(r.decimals)}get signed(){return this.#e.signed}get width(){return this.#e.width}get decimals(){return this.#e.decimals}get value(){return this.#t}#i(e){assertArgument(this.format===e.format,"incompatible format; use fixedNumber.toFormat","other",e)}#n(e,t){return e=checkValue(e,this.#e,t),new FixedNumber(f,e,this.#e)}#s(e,t){return this.#i(e),this.#n(this.#t+e.#t,t)}addUnsafe(e){return this.#s(e)}add(e){return this.#s(e,"add")}#a(e,t){return this.#i(e),this.#n(this.#t-e.#t,t)}subUnsafe(e){return this.#a(e)}sub(e){return this.#a(e,"sub")}#u(e,t){return this.#i(e),this.#n(this.#t*e.#t/this.#r,t)}mulUnsafe(e){return this.#u(e)}mul(e){return this.#u(e,"mul")}mulSignal(e){this.#i(e);let t=this.#t*e.#t;return errors_assert(t%this.#r===u,"precision lost during signalling mul","NUMERIC_FAULT",{operation:"mulSignal",fault:"underflow",value:this}),this.#n(t/this.#r,"mulSignal")}#l(e,t){return errors_assert(e.#t!==u,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#i(e),this.#n(this.#t*this.#r/e.#t,t)}divUnsafe(e){return this.#l(e)}div(e){return this.#l(e,"div")}divSignal(e){errors_assert(e.#t!==u,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#i(e);let t=this.#t*this.#r;return errors_assert(t%e.#t===u,"precision lost during signalling div","NUMERIC_FAULT",{operation:"divSignal",fault:"underflow",value:this}),this.#n(t/e.#t,"divSignal")}cmp(e){let t=this.value,r=e.value,i=this.decimals-e.decimals;return(i>0?r*=getTens(i):i<0&&(t*=getTens(-i)),t<r)?-1:t>r?1:0}eq(e){return 0===this.cmp(e)}lt(e){return 0>this.cmp(e)}lte(e){return 0>=this.cmp(e)}gt(e){return this.cmp(e)>0}gte(e){return this.cmp(e)>=0}floor(){let e=this.#t;return this.#t<u&&(e-=this.#r-l),e=this.#t/this.#r*this.#r,this.#n(e,"floor")}ceiling(){let e=this.#t;return this.#t>u&&(e+=this.#r-l),e=this.#t/this.#r*this.#r,this.#n(e,"ceiling")}round(e){if(null==e&&(e=0),e>=this.decimals)return this;let t=this.decimals-e,r=o*getTens(t-1),i=this.value+r,n=getTens(t);return checkValue(i=i/n*n,this.#e,"round"),new FixedNumber(f,i,this.#e)}isZero(){return this.#t===u}isNegative(){return this.#t<u}toString(){return this._value}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(e){return FixedNumber.fromString(this.toString(),e)}static fromValue(e,t,r){let i=null==t?0:getNumber(t),n=getFormat(r),s=getBigInt(e,"value"),a=i-n.decimals;if(a>0){let t=getTens(a);errors_assert(s%t===u,"value loses precision for format","NUMERIC_FAULT",{operation:"fromValue",fault:"underflow",value:e}),s/=t}else a<0&&(s*=getTens(-a));return checkValue(s,n,"fromValue"),new FixedNumber(f,s,n)}static fromString(e,t){let r=e.match(/^(-?)([0-9]*)\.?([0-9]*)$/);assertArgument(r&&r[2].length+r[3].length>0,"invalid FixedNumber string value","value",e);let i=getFormat(t),n=r[2]||"0",s=r[3]||"";for(;s.length<i.decimals;)s+=g;errors_assert(s.substring(i.decimals).match(/^0*$/),"too many decimals for format","NUMERIC_FAULT",{operation:"fromString",fault:"underflow",value:e}),s=s.substring(0,i.decimals);let a=BigInt(r[1]+n+s);return checkValue(a,i,"fromString"),new FixedNumber(f,a,i)}static fromBytes(e,t){let r=function(e){if(e instanceof Uint8Array){let t="0x0";for(let r of e)t+=s[r>>4]+s[15&r];return BigInt(t)}return getBigInt(e)}(function(e,t,r){if(e instanceof Uint8Array)return r?new Uint8Array(e):e;if("string"==typeof e&&e.match(/^0x([0-9a-f][0-9a-f])*$/i)){let t=new Uint8Array((e.length-2)/2),r=2;for(let i=0;i<t.length;i++)t[i]=parseInt(e.substring(r,r+2),16),r+=2;return t}assertArgument(!1,"invalid BytesLike value",t||"value",e)}(e,"value",!1)),i=getFormat(t);return i.signed&&(r=fromTwos(r,i.width)),checkValue(r,i,"fromBytes"),new FixedNumber(f,r,i)}};let m=["wei","kwei","mwei","gwei","szabo","finney","ether"];function parseUnits(e,t){assertArgument("string"==typeof e,"value must be a string","value",e);let r=18;if("string"==typeof t){let e=m.indexOf(t);assertArgument(e>=0,"invalid unit","unit",t),r=3*e}else null!=t&&(r=getNumber(t,"unit"));return FixedNumber.fromString(e,{decimals:r,width:512}).value}function formatEther(e){return function(e,t){let r=18;if("string"==typeof t){let e=m.indexOf(t);assertArgument(e>=0,"invalid unit","unit",t),r=3*e}else null!=t&&(r=getNumber(t,"unit"));return FixedNumber.fromValue(e,r,{decimals:r,width:512}).toString()}(e,18)}function parseEther(e){return parseUnits(e,18)}}}]);